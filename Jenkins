node {
    stage('SCM checkout') {
        git 'https://github.com/Bhanalliarun/Terraformpipeline.git'
    }

    stage('Mvn Package- Unit and Integration Test'){
        def mvnHome = tool name: 'Maven', type: 'maven'
        def mvnCMD = "${mvnHome}/bin/mvn"
        sh "${mvnCMD} clean install"
    }
    
    stage('SonarQube Analysis') {
       def mvnHome =  tool name: 'Maven', type: 'maven'
       withSonarQubeEnv('sonar') { 
       sh "${mvnHome}/bin/mvn sonar:sonar"
       }
    } 
    
    stage('Build Docker Image'){
        sh 'docker build -t bhanalliarun/my-terra:2.0.0 .'
    }
    stage('Push Docker Image'){
        withCredentials([string(credentialsId: 'dockerpwd', variable: 'docker')])
        {
        sh "docker login -u bhanalliarun -p ${docker}"
        }
        sh 'docker push bhanalliarun/my-terra:2.0.0'
    }
 
    stage ('Infracture Provision') {
        print 'Provision of infrastructure from Terraform'
        withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                      string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
            sh '''
        pwd
        cd vpc
         terraform init
         terraform validate
         terraform plan -out createplan
         terraform apply createplan
          '''
                      }
    }
   
     stage ('Deployment to k8s through ansible') {
        print 'Deployment through ansible'
        sh '''
         pwd
        ansible-playbook -i /home/ubuntu/hosts -u ubuntu ansibledeployment.yml -v      
          '''
    }  
     
   input 'Click on Proceed to destroy infrastructure!!' 
    
    stage ('Terraform Destroy') {
        print 'Destroy the resources'
        withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'),
                      string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
            sh '''
        cd vpc
         terraform destroy -auto-approve
          '''
                      }
    } 
}    

